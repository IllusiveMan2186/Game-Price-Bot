package com.gpb.backend.configuration;

import com.gpb.common.service.RestTemplateHandlerService;
import com.gpb.common.service.impl.RestTemplateHandlerServiceImpl;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;
import org.apache.hc.client5.http.ssl.DefaultClientTlsStrategy;
import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.web.client.RestTemplate;

import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.ssl.SSLContexts;
import org.apache.hc.core5.ssl.TrustStrategy;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;
import java.io.InputStream;
import java.security.KeyStore;

/**
 * Configuration class for creating and wiring beans related to REST communication.
 */
@Configuration
public class RestTemplateConfiguration {

    /**
     * Creates a {@link RestTemplate} bean used for executing HTTP requests.
     *
     * @return a new instance of {@link RestTemplate}
     */
    @Bean
    public RestTemplate restTemplate() throws Exception {
        String trustStorePassword = "trustpass";
        ClassPathResource trustStoreResource = new ClassPathResource("truststore.jks");

        KeyStore trustStore = KeyStore.getInstance("JKS");
        try (InputStream inputStream = trustStoreResource.getInputStream()) {
            trustStore.load(inputStream, trustStorePassword.toCharArray());
        }

        SSLContext sslContext = SSLContexts.custom()
                .loadTrustMaterial(trustStore, null)
                .build();

        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);

        CloseableHttpClient httpClient = HttpClients.custom()
                .setSSLSocketFactory(socketFactory)
                .build();

        return new RestTemplate(new HttpComponentsClientHttpRequestFactory(httpClient));
    }

    /**
     * Creates a {@link RestTemplateHandlerService} bean which wraps the {@link RestTemplate}
     * for making synchronized REST calls to other services.
     *
     * @param restTemplate the {@link RestTemplate} used for HTTP requests
     * @param validApiKey  the API key used for authenticating requests to the target service
     * @param gameServiceUrl the URL of the game service to which requests are directed
     * @return an instance of {@link RestTemplateHandlerServiceImpl}
     */
    @Bean
    public RestTemplateHandlerService restTemplateHandler(RestTemplate restTemplate,
                                                          @Value("${api.key}") String validApiKey,
                                                          @Value("${game.service.url}") String gameServiceUrl) {
        return new RestTemplateHandlerServiceImpl(restTemplate, validApiKey, gameServiceUrl);
    }
}